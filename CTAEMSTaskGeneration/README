
--Structure File--
The structure file is a CTAEMS task file using s-expressions. This program only looks for the following syntax. Everything else in the file (as long as it is still s-expressions) will be ignored and included in the resulting file. 

The keyword 'Method' is used to indicate generated methods should be placed in the enclosing task. The keyword will only be recognized inside a spec_task inside the subtasks list. The keyword is then followed by either '#' or '%' and then a positive integer. Examples follows:

	(spec_task
		(label task1)
		(subtasks Method#4)  <-- keyword 'Method' goes here
	)

	(spec_task
		(label task2)
		(subtasks Method%25)  <-- keyword 'Method' goes here
	)

Meaning:
	Method#[n] : insert n generated methods into the task
	Method%[n] : insert n percent of all generated methods that available to the node. More this next.

NOTE: all Method#[n] in a subtask given generated methods before calculating all the Method%[n]. This allows for the sum of the percents to be 100 regardless of the use of Method#[n]. Example follows:

	(spec_task
		(label task2)
		(subtasks Method%25 Method#12)  <-- keyword 'Method' goes here
	)

	* If 92 generated methods are available to this task then Method#12 will be replaced with 12 generated methods.
	* Now there are 80 generated methods remaining so Method%25 will be replaced with 20 generated methods.
	*** This is a bad example since 60 generated methods are lost but it illustrates the point above. ***


Additionally task names inside of the subtasks list can be postfixed with '%' and a positive integer. The need for the '#' postfix in this case is redundant. Instead the sum of x for all Method#[x] in the task heirachy will be computed without needing to specify that sum manually.

Meaning:
	TASKNAME%[n] : send n percent of the generated methods to be inserted into task TASKNAME

	(spec_task
		(label task1)
		(subtasks task2%50 Method%50)
	)

	(spec_task
		(label task2)
		(subtasks Method%100)
	)

	* If 50 generated methods are made available to task1 then 25 methods will be inserted into task1 because of Method%50.
	* task2 will then have 25 generated methods available and the 25 methods will be inserted because of Method%100.


Finally task names inside of the subtasks list can be postfixed with '...'. This postfix can be used jointly with %[n]. The '...' must come before the '%'. The only restriction is the entire task hierachy of the postfixed task cannot contain any of the '...' or '%' postfixes. These postfixes calculate after Method#[n] and Method %[n] have been calculated.

Meaning:
	TASKNAME...%[n] : use n percent of the generated methods to construct as many clones of TASKNAME task hierachies
	TASKNAME...     : same as TASKNAME...%[n] where n comes from the following equation
	                  percent_left = 100 - (sum of x from all TASKNAME...%[x] in the subtask list)
	                  count = (count of all TASKNAME... in the subtask list)
	                  n = percent_left / count

NOTE: the number of clones that are created is dependent on the number of generated methods the task hierachy can hold. This number is the sum of x for all Method#[x] that are in the task hierachy.

	(spec_task
		(label task1)
		(subtasks task2... task3...%40 task3... Method#3 Method%20)
	)

	(spec_task
		(label task2)
		(subtasks Method#1)
	)

	(spec_task
		(label task3)
		(subtasks Method#2)
	)


	* If 53 generated methods are available to task1 then Method#3 will 3 generated methods will be inserted into task1
	* From the remaining 50, Method%20 will calculate and insert 10 generated methods into task1
	* Calculate the percentage for task2... and task3... which will be 30% each ((100% - 40%) / 2)
	* From the remaining 40 generated methods:
	* task3...%40 will take 16 generated methods and create 8 clones of task3, each clone with 2 of the generated methods
	* task2... takes 30% which is 12 and creates 12 clones, each clone with 1 of the generated methods (because there is only Method#1 in task2 heirachy)
	* task3... takes 30% also and creates 6 clones, each clone with 2 of the generated methods  (because there is only Method#2 in task2 heirachy)

